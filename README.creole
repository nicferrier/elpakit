A package archive builder.

This is for building file based package archives. This is useful
for deploying small sets of under-development-packages in servers;
for example elnode packages. 

It's also useful for describing the work of building multi-file
packages and for expressing some testing details.

An example:

{{{
(elpakit 
     "/tmp/shoesoffsaas"    ;; the directory to make the archive in
     '("~/work/elnode-auth" ;; the list of package directories
       "~/work/emacs-db"
       "~/work/shoes-off"
       "~/work/rcirc-ssh"))
}}}

This should make a package archive in /tmp/shoesoffsaas which has the
4 packages in it, it will //build// those packages first if they need
to be built (building only really means something for tar packages).


== Status ==

This is very early code and it's difficult to test a lot of it. It
mostly works. You may find bugs. If you do please tell me.


== Packaging ==

To use elpakit your development tree must conform to a particular
standard.

Packages are directories with either:

* a single elisp file in them which is the package file; a single-file
  package is constructed from these

* a single elisp file, which is the package file, and some form of
  README file; a single-file package is constructed from these.
  Essentially the README is ignored.

* a recipes directory containing a file named for the package (eg:
  "elnode", it can also be different from the dev dir, eg: "emacs-db"
  might have a "recipes/db" recipe file). The recipes file //broadly//
  follows the MELPA conventions. It mostly specifies the {{{:files}}}
  in the dev directory which belong to the package. 

**  There must be only one elisp file in the recipe for a recipe dev
  directory to be considered a single-file package.

* a recipes directory, just as above, but containing many elisp files;
  these are considered tar packages and are built as such.


== Recipe files ==

The recipe format is based on the MELPA format but extended to include
the extra meta-data required by tar packages.

Here are some examples for now.

{{{db}}} is a single file package, but the repository directory
includes a tests file and the README:

{{{
(db
 :files ("db.el"))
}}}

this is the simplest form of recipe. It should not be needed very
often because there is enough intelligence in elpakit about what is in
a repository directory to infer this recipe.

elpakit can help with testing if you tell it about your test files and
dependancies:

{{{
(web
 :files 
  ("web.el")
 :test
  (:requires
    ((fakir "0.0.10")
     (elnode "0.9"))
   :files
    ("web-test.el")))
}}}

This is still a single file recipe. The test file and it's //requires//
are not needed for running the package, only testing it. Therefore
they do not need to be packaged.

{{{elnode}}} is a tar package and has quite a lot of complexity:

{{{
(elnode
 :version "0.9.9.6.1"
 :doc "The Emacs webserver."
 :requires 
 ((web "0.1.4") ;; for rle
  (creole "0.8.14") ;; for wiki
  (db "0.0.1")
  (kv "0.0.9"))
 :files 
 ("elnode.el" 
  "elnode-rle.el"
  "elnode-wiki.el"
  "default-wiki-index.creole"
  "default-webserver-test.html"
  "default-webserver-image.png"
  "README.creole"
  "COPYING")
 :test
 (:requires 
  ((fakir "0.0.14"))
  :files
  ("elnode-tests.el")))
}}}

Elnode is like this because it needs to deliver the default wiki
pages, these obviously must be pacckaged.


== Notes on the differences with MELPA ==

I hope to merge much of this with MELPA. The MELPA guys are cool, I
think it will be doable.

MELPA's code was not portable enough for me, quickly enough, to do
what I needed. So I have duplicated lots of functionality. Hopefully
we can de-duplicate in the future.

The MELPA recipe standard has no:

* {{{version}}}
* {{{doc}}}
* {{{requires}}}
* or {{{test}}} sections

as far as I can see. These have been added to elpakit to make the task
of building tar files possible.

MELPA doesn't even need the version since it pulls it from the GIT
commit?

A side aim for elpakit is that it makes defining a package partly a
function of the package's source control. Just like it normally is
with other package systems (dpkg, rpm, pip, etc...).

MELPA specifies the recipes elsewhere than the repository source
control. It's obvious why this has happened, they needed to support
people MELPA packaging repositories they did not have commit access
to.

I don't know how to solve this problem, maybe the MELPA guys could
switch their code to autodetect repository provided recipes somehow?

== Useful tips ==

There are a bunch of useful things you can do if you're building apps
that are collections of elpa packages.

=== Evaling an elpakit ===

You can build an elpakit entirely inside your emacs. This basically
means just evaling all the lisp it finds.

{{{
(elpakit-eval   
 '("~/work/elnode-auth"
   "~/work/emacs-db"
   "~/work/shoes-off"
   "~/work/rcirc-ssh"))
}}}

Sometimes you have to muck about with the ordering of the kit to make
it work because there are dependancies (requires) that don't work
unless you eval things in a particular order.

=== A remote elpakit destination ===

Elpakit doesn't care what the destination is as long as it looks like
a directory to Emacs. That means you can use TRAMP:

{{{
(elpakit "/ssh:my-remote-host.example.com/myapp-elpa/"
   '("~/work/elnode-auth"
     "~/work/emacs-db"
     "~/work/shoes-off"))
}}}

=== Defining kits to be reusable ===

Just collecting the list of package directories into a list means you
can do lots of different things with elpakit:

{{{
(defconst shoes-off-elpakit
  '("~/work/shoes-off"
    "~/work/rcirc-ssh"
    "~/work/emacs-db"
    "~/work/esxml"
    "~/work/elnode-auth"
    "~/work/emacs-kv"
    "~/work/shoes-off-aas/talkapp"))
}}}

Then you can:

{{{
(elpakit "~/my-app-elpa" shoes-off-elpakit)
}}}

If you use a {{{defconst}}} then you can re-eval it more easily.


=== Building kits remotely ===

If you want to deploy to a remote host without pushing to an official
repository you can still do that, just use tramp for the destination:

{{{
(elpakit
 "/ssh:nic@livehost.example.com:apps/app1/app-elpa"
 my-elpakit)
}}}

Presuming {{{my-elpakit}}} is an elpakit list. Elpakit uses a straight
copy so tramp works fine.

== TODO ==

* add more intelligence to {{{elpakit/do}}} to allow it to construct a recipe for multi-file packages
** multiple, non-test lisp files could just be packaged
** include any README and licence file
* add a constructor for recipe files?
* add a mode for editing recipe files?
